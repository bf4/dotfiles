#!/usr/bin/env bash
# options
#   WORKSTATION_UPDATE=true
#   MY_EMAIL=
#   DOTFILES_HOME=
# http://stackoverflow.com/questions/2013547/assigning-default-values-to-shell-variables-with-a-single-command-in-bash
MY_EMAIL=${MY_EMAIL:-github@benjaminfleischer.com}
export DOTFILES_HOME=${DOTFILES_HOME:-.homesick/repos/dotfiles/home}

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

source "$HOME/${DOTFILES_HOME}/../functions.bash"
source "$HOME/${DOTFILES_HOME}/.shells/colors.sh"

# SHELL-CONFIG #
################
case "$SHELL" in
  */zsh) : ;;
  *)
    # Zsh as your shell
    # fancy_echo "Changing your shell to zsh ..."
    # chsh -s "$(which zsh)"
    echo "Current shell is ${SHELL}"
    ;;
esac

# Homebrew Installation #
# http://brew.sh/       #
# Homebrew for managing operating system libraries
#########################
if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    append_to_rc '# recommended by brew doctor'

    # shellcheck disable=SC2016
    append_to_rc 'export PATH="/usr/local/bin:$PATH"' 1

    export PATH="/usr/local/bin:$PATH"
else
  fancy_debug "Homebrew already installed. Skipping ..."
fi
# Homebrew Cask (for binaries)
# brew_tap caskroom/cask
brew_install "caskroom/cask/brew-cask"
# brew_tap 'thoughtbot/formulae'

# Workstation Update      #
# WORKSTATION_UPDATE=true #
# - link bin files        #
# - setup vim             #
# - update homebrew/cask  #
###########################
if [ "$WORKSTATION_UPDATE" = "true" ]
then

  mkdir -p "$HOME/bin"
  cd "$HOME/${DOTFILES_HOME}/.." && \
    #
    # hard link bin files
    git  ls-files bin | \
    ruby -rfileutils -e 'STDIN.readlines.each{|line| \
    FileUtils.ln(File.join(Dir.pwd, line.chomp), File.join(File.expand_path("~"), line.chomp), \
    :verbose => true, :force => true) }'  &&

  fancy_echo "setuping up vim" &&
    sh setup_vim.sh

  fancy_echo "Updating Homebrew formulas ..."
    brew update &&
    brew upgrade brew-cask &&
    brew cleanup &&
    brew cask cleanup
fi

# XCode, installed from app store or
#   \curl http://adcdownload.apple.com/Developer_Tools/xcode_5.0.2/xcode_5.0.2.dmg
# then install command line tools
# sudo xcodebuild -license
###################################
if fn_exists "xcode-select" && ! fn_exists "clang"
then
 `open /Applications/Xcode.app`
  xcode-select --install
fi

# Ruby
# brew_install_or_upgrade 'rbenv'
# brew_install_or_upgrade 'ruby-build'
#
# # shellcheck disable=SC2016
# append_to_rc 'eval "$(rbenv init - $SHELL --no-rehash)"' 1
#
# brew_install_or_upgrade 'openssl'
# brew unlink openssl && brew link openssl --force
# brew_install_or_upgrade 'libyaml'

# Ruby stable for writing general-purpose code
# ruby_version="$(curl -sSL http://ruby.thoughtbot.com/latest)"
#
# eval "$(echo $SHELL | rbenv init -)"

# if ! rbenv versions | grep -Fq "$ruby_version"; then
#   rbenv install -s "$ruby_version"
# fi
#
# rbenv global "$ruby_version"
# rbenv shell "$ruby_version"
#
# gem update --system
#
# Bundler for managing Ruby libraries
# gem_install_or_update 'bundler'

# fancy_echo "Configuring Bundler ..."
#   number_of_cores=$(sysctl -n hw.ncpu)
#   bundle config --global jobs $((number_of_cores - 1))
## RVM
## http://rvm.io/
# # work around missing libgmp bug in binary ruby
# brew rm cloog; brew install cloog
#########################################
install_rvm stable --autolibs=homebrew

# Workstation Update      #
# WORKSTATION_UPDATE=true #
# - update rvm / ruby     #
###########################
if [ "$WORKSTATION_UPDATE" = "true" ]
then
  fancy_echo "updating rvm"
  rvm get stable --auto-dotfiles &> /dev/null || fancy_echo $!
  # Foreman for managing web processes
  install_ruby 2.2 bundler foreman
  rvm use 2.2 --default
fi

## GIT
# brew_install_or_upgrade 'git'
_ensure_github_ssh_configured() {
  # ssh keys to github
  ssh git@github.com 2>&1| grep successfully
  if [ $? -eq 0 ]
  then
    "You are authenticated with github"
  else
    if not_file_exists $HOME/.ssh/id_rsa.pub
    then
      mkdir -p ~/.ssh
      cd ~/.ssh
      ssh-keygen -t rsa -C "${MY_EMAIL}"
      # start ssh agent
      eval "$(ssh-agent -s)"
      ssh-add ~/.ssh/id_rsa
      echo -e "$txtgrn"
      echo "Copy your SSH keys to github if you have not already"
      echo "See http://help.github.com/mac-set-up-git/"
      echo "Or just:"
      echo "cat ~/.ssh/id_rsa.pub | pbcopy"
      echo -e "$txtrst"
    fi
  fi
  ssh -T git@github.com
}
if fn_exists "git"
then
  fancy_debug "we have git"
else
  brew_install "git"
  # The OS X keychain credential helper has been installed to:
  #   /usr/local/bin/git-credential-osxkeychain
  #
  # The 'contrib' directory has been installed to:
  #   /usr/local/share/git-core/contrib
  #
  # Bash completion has been installed to:
  #   /usr/local/etc/bash_completion.d
  #
  # zsh completion has been installed to:
  #   /usr/local/share/zsh/site-functions
  # see https://github.com/thoughtbot/laptop/issues/360
  _ensure_github_ssh_configured
fi

## LIBRARIES INSTALL/UPGRADE
bash ~/${DOTFILES_HOME}/../brew.sh

## Repos Directory
if file_exists $HOME/projects
then
  fancy_debug "$HOME/projects exists"
else
  fancy_echo "Creating $HOME/projects"
  mkdir -p $HOME/projects
fi
fancy_echo "all done setting up workstation!"
