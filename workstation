#!/usr/bin/env bash
# options
# WORKSTATION_UPDATE=true
# HACK_MY_OSX=true
# http://stackoverflow.com/questions/2013547/assigning-default-values-to-shell-variables-with-a-single-command-in-bash
MY_EMAIL=${MY_EMAIL:-github@benjaminfleischer.com}
export DOTFILES_HOME=${DOTFILES_HOME:-.homesick/repos/dotfiles/home}

# set -e

source "$HOME/${DOTFILES_HOME}/../functions.bash"

if [ "$WORKSTATION_UPDATE" = "true" ]
then
  # copy existing files over from home
  # cd ~ && \
  # ls -al | awk '{ print $9 }' | ruby -e 'STDIN.readlines.each{|line| puts(line) \
  #   if line =~ /^\.[a-z_-]+/  \
  #   && File.file?(File.join(File.expand_path("~"),line.chomp)) }' | \
  #   while read "x" ; do cp "$x" "${DOTFILES_HOME}/$x" ; done

  mkdir -p "$HOME/bin"
  cd "$HOME/${DOTFILES_HOME}" && \
    # hard link bin files
    git  ls-files bin | \
    ruby -rfileutils -e 'STDIN.readlines.each{|line| \
    FileUtils.ln(File.join(Dir.pwd, line.chomp), File.join(File.expand_path("~"), line.chomp), \
    :verbose => true, :force => true) }'  &&

    # hard link dotfiles
    # prefer homesick
    # git ls-files | \
    # ruby -rfileutils -e 'STDIN.readlines.each{|line| \
    # FileUtils.ln(File.join(Dir.pwd, line.chomp), File.join(File.expand_path("~"), line.chomp), \
    # :verbose => true, :force => true) \
    # if line =~ /^\.[a-z_-]+/  \
    # }'
  if not_file_exists "$HOME/vimfiles"
  then
    cd ~ &&
      git clone https://github.com/bf4/vimfiles.git vimfiles
  fi
fi


# http://brew.sh/ Homebrew
if fn_exists "brew"
then
  echo "we have brew"
else
  echo "installing brew"
  ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
fi
if [ "$WORKSTATION_UPDATE" = "true" ] ; then brew update ; fi

# XCode, installed from app store or
#   \curl http://adcdownload.apple.com/Developer_Tools/xcode_5.0.2/xcode_5.0.2.dmg
# then install command line tools
if fn_exists "xcode-select" && ! fn_exists "clang"
then
 `open /Applications/Xcode.app`
  xcode-select --install
fi

## RVM
## http://rvm.io/
# # work around missing libgmp bug in binary ruby
# brew rm cloog; brew install cloog
install_rvm stable --autolibs=homebrew
install_ruby 2.1 bundler foreman
rvm use 2.1 --default

if [ "$WORKSTATION_UPDATE" = "true" ]
then
  echo "updating rvm"
  rvm get stable --auto-dotfiles &> /dev/null || echo $!
fi

## Git
if fn_exists "git"
then
  echo "we have git"
else
  brew_install "git"
  # The OS X keychain credential helper has been installed to:
  #   /usr/local/bin/git-credential-osxkeychain
  #
  # The 'contrib' directory has been installed to:
  #   /usr/local/share/git-core/contrib
  #
  # Bash completion has been installed to:
  #   /usr/local/etc/bash_completion.d
  #
  # zsh completion has been installed to:
  #   /usr/local/share/zsh/site-functions
  # ssh keys to github
  ssh git@github.com 2>&1| grep successfully
  if [ $? -eq 0 ]
  then
    "You are authenticated with github"
  else
    if not_file_exists $HOME/.ssh/id_rsa.pub
    then
      mkdir -p ~/.ssh
      cd ~/.ssh
      ssh-keygen -t rsa -C "${MY_EMAIL}"
      # start ssh agent
      eval "$(ssh-agent -s)"
      ssh-add ~/.ssh/id_rsa
      echo "Copy your SSH keys to github if you have not already"
      echo "See http://help.github.com/mac-set-up-git/"
      echo "Or just:"
      echo "cat ~/.ssh/id_rsa.pub | pbcopy"
    fi
  fi
  ssh -T git@github.com
fi

## Homebrew Cask (for binaries)
brew_tap caskroom/cask
brew_install "brew-cask"

if brew cask list | grep "firefox" &> /dev/null
then
  echo "Firefox is already installed by brew cask"
  echo "  If you have trouble running selenium,"
  echo "  brew cask uninstall firefox && workstation setup"
  false
elif app_exists $(echo "Firefox" | cut -d- -f2)
then
  echo "Firefox is installed, but not by brew cask"
  echo "  If you have trouble running selenium, uninstall"
  echo "  and re-run workstation setup"
  false
else
  echo "Installing FireFox"
  # need specific firefox version for selenium tests
  # and need the appdir to be /Applications
  brew cask install ~/${DOTFILES_HOME}/../brews/firefox.rb --appdir="/Applications"
  echo "------"
  echo "------ Selenium Compatible FIREFOX INSTALLED"
  echo "------ Automatic updates are disabled."
  echo "------ You may manually update FireFox if you wish"
  echo "------ Although this may break Capybara tests"
  echo "------"
fi

brew_cask "google-chrome" --appdir="/Applications"

if cmd_success brew_install "hub"
then
  echo "See https://github.com/github/hub for what hub adds to git"
fi

# get the nice vim that macvim comes with
echo "This may fail if you haven't installed the full XCode."
brew_install macvim

brew_install ctags
brew_install tmux
brew_install reattach-to-user-namespace --wrap-pbcopy-and-pbpaste --wrap-launchtl && echo "Run tmux kill-server"
brew_install the_platinum_searcher # aka 'pt'
brew_cask sequel-pro --app-dir="/Applications"

## Repos Directory
if file_exists $HOME/projects
then
  echo "$HOME/projects exists"
else
  echo "Creating $HOME/projects"
  mkdir -p $HOME/projects
fi

brew_cask "alfred" --app-dir="/Applications"
echo "open alfred from '/opt/hombrew-cask/Caskroom'"
if cmd_success
then
  # ==> Symlinking App 'Alfred 2.app' to '$HOME/Applications/Alfred
  # 2.app'
  # ==> Symlinking App 'Alfred Preferences.app' to
  # '$HOME/Applications/Alfred Preferences.app'
  # tell alfred find homebrew_casked items
  brew_cask "alfred link"
  # TODO: add to login items
fi

brew_cask "caffeine" --app-dir="/Applications"
# TODO: add to login items

brew_cask "cd-to" --app-dir="/Applications"
# TODO: add instructions for dragging link to finder
brew_cask "nvalt" --app-dir="/Applications"
# brew_cask "vmware-fusion"
# brew_cask "hipchat"
# brew_cask "pgadmin3"

brew_install "tree" --app-dir="/Applications"
brew_install "trash" --app-dir="/Applications"

# see https://github.com/mathiasbynens/dotfiles/blob/master/.osx

if [ "$HACK_MY_OSX" = "true" ]
then
    # Ask for the administrator password upfront
    sudo -v

    # Keep-alive: update existing `sudo` time stamp until `.osx` has finished
    while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

    ###############################################################################
    # General UI/UX                                                               #
    ###############################################################################

    # Set computer name (as done via System Preferences → Sharing)
    #sudo scutil --set ComputerName "0x6D746873"
    #sudo scutil --set HostName "0x6D746873"
    #sudo scutil --set LocalHostName "0x6D746873"
    #sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName -string "0x6D746873"

    # Disable smart quotes as they’re annoying when typing code
    defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false

    # Disable smart dashes as they’re annoying when typing code
    defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false

    # Remove duplicates in the “Open With” menu (also see `lscleanup` alias)
    /System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user

    # Display ASCII control characters using caret notation in standard text views
    # Try e.g. `cd /tmp; unidecode "\x{0000}" > cc.txt; open -e cc.txt`
    defaults write NSGlobalDomain NSTextShowsControlCharacters -bool true

    # Reveal IP address, hostname, OS version, etc. when clicking the clock
    # in the login window
    sudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName

    # Restart automatically if the computer freezes
    sudo systemsetup -setrestartfreeze on

    # Set a custom wallpaper image. `DefaultDesktop.jpg` is already a symlink, and
    # all wallpapers are in `/Library/Desktop Pictures/`. The default is `Wave.jpg`.
    #rm -rf ~/Library/Application Support/Dock/desktoppicture.db
    #sudo rm -rf /System/Library/CoreServices/DefaultDesktop.jpg
    #sudo ln -s /path/to/your/image /System/Library/CoreServices/DefaultDesktop.jpg

    # Increase sound quality for Bluetooth headphones/headsets
    defaults write com.apple.BluetoothAudioAgent "Apple Bitpool Min (editable)" -int 40

    # Enable full keyboard access for all controls
    # (e.g. enable Tab in modal dialogs)
    defaults write NSGlobalDomain AppleKeyboardUIMode -int 3

    # Disable press-and-hold for keys in favor of key repeat
    defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false

    # Set a blazingly fast keyboard repeat rate
    defaults write NSGlobalDomain KeyRepeat -int 0

    # Disable auto-correct
    defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false

    # Menu bar: hide the Time Machine, Volume, User, and Bluetooth icons
    # for domain in ~/Library/Preferences/ByHost/com.apple.systemuiserver.*; do
    #     defaults write "${domain}" dontAutoLoad -array \
    #         "/System/Library/CoreServices/Menu Extras/TimeMachine.menu" \
    #         "/System/Library/CoreServices/Menu Extras/Volume.menu" \
    #         "/System/Library/CoreServices/Menu Extras/User.menu"
    # done
    # defaults write com.apple.systemuiserver menuExtras -array \
    #     "/System/Library/CoreServices/Menu Extras/Bluetooth.menu" \
    #     "/System/Library/CoreServices/Menu Extras/AirPort.menu" \
    #     "/System/Library/CoreServices/Menu Extras/Battery.menu" \
    #     "/System/Library/CoreServices/Menu Extras/Clock.menu"

    ###############################################################################
    # SSD-specific tweaks                                                         #
    ###############################################################################

    # Disable local Time Machine snapshots
    sudo tmutil disablelocal

    # Disable hibernation (speeds up entering sleep mode)
    sudo pmset -a hibernatemode 0

    # Remove the sleep image file to save disk space
    sudo rm /Private/var/vm/sleepimage
    # Create a zero-byte file instead…
    sudo touch /Private/var/vm/sleepimage
    # …and make sure it can’t be rewritten
    sudo chflags uchg /Private/var/vm/sleepimage

    # Disable the sudden motion sensor as it’s not useful for SSDs
    sudo pmset -a sms 0

    ## Terminal.app
    # Only use UTF-8 in Terminal.app
    defaults write com.apple.terminal StringEncodings -array 4

    ## Chrome

    # Allow installing user scripts via GitHub Gist or Userscripts.org
    defaults write com.google.Chrome ExtensionInstallSources -array "https://gist.githubusercontent.com/" "http://userscripts.org/*"
    defaults write com.google.Chrome.canary ExtensionInstallSources -array "https://gist.githubusercontent.com/" "http://userscripts.org/*"

    ## Sublime

    # Install Sublime Text settings
    cp -r init/Preferences.sublime-settings ~/Library/Application\ Support/Sublime\ Text*/Packages/User/Preferences.sublime-settings 2> /dev/null

    ## Twitter
    # Disable smart quotes as it’s annoying for code tweets
    defaults write com.twitter.twitter-mac AutomaticQuoteSubstitutionEnabled -bool false

    ###############################################################################
    # Safari & WebKit                                                             #
    ###############################################################################

    # Set Safari’s home page to `about:blank` for faster loading
    defaults write com.apple.Safari HomePage -string "about:blank"

    # Prevent Safari from opening ‘safe’ files automatically after downloading
    defaults write com.apple.Safari AutoOpenSafeDownloads -bool false

    # Allow hitting the Backspace key to go to the previous page in history
    defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2BackspaceKeyNavigationEnabled -bool true

    # Hide Safari’s bookmarks bar by default
    defaults write com.apple.Safari ShowFavoritesBar -bool false

    # Hide Safari’s sidebar in Top Sites
    defaults write com.apple.Safari ShowSidebarInTopSites -bool false

    # Disable Safari’s thumbnail cache for History and Top Sites
    defaults write com.apple.Safari DebugSnapshotsUpdatePolicy -int 2

    # Enable Safari’s debug menu
    defaults write com.apple.Safari IncludeInternalDebugMenu -bool true

    # Make Safari’s search banners default to Contains instead of Starts With
    defaults write com.apple.Safari FindOnPageMatchesWordStartsOnly -bool false

    # Remove useless icons from Safari’s bookmarks bar
    defaults write com.apple.Safari ProxiesInBookmarksBar "()"

    # Enable the Develop menu and the Web Inspector in Safari
    defaults write com.apple.Safari IncludeDevelopMenu -bool true
    defaults write com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true
    defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled -bool true

    # Add a context menu item for showing the Web Inspector in web views
    defaults write NSGlobalDomain WebK

    ###############################################################################
    # Kill affected applications                                                  #
    ###############################################################################

    # for app in "Activity Monitor" "Address Book" "Calendar" "Contacts" "cfprefsd" \
    #     "Dock" "Finder" "Mail" "Messages" "Safari" "SizeUp" "SystemUIServer" \
    #     "Terminal" "Transmission" "Twitter" "iCal"; do
    #     killall "${app}" > /dev/null 2>&1
    # done
    # echo "Done. Note that some of these changes require a logout/restart to take effect."
fi
