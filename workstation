#!/usr/bin/env bash
# options
#   WORKSTATION_UPDATE=true
#   MY_EMAIL=
#   DOTFILES_HOME=
# http://stackoverflow.com/questions/2013547/assigning-default-values-to-shell-variables-with-a-single-command-in-bash
MY_EMAIL=${MY_EMAIL:-github@benjaminfleischer.com}
export DOTFILES_HOME=${DOTFILES_HOME:-.homesick/repos/dotfiles/home}

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

source "$HOME/${DOTFILES_HOME}/../functions.bash"
source "$HOME/${DOTFILES_HOME}/.shells/colors.sh"

# SHELL-CONFIG #
################
case "$SHELL" in
  */zsh) : ;;
  *)
    # Zsh as your shell
    # fancy_echo "Changing your shell to zsh ..."
    # chsh -s "$(which zsh)"
    echo "Current shell is ${SHELL}"
    ;;
esac

# Homebrew Installation #
# http://brew.sh/       #
# Homebrew for managing operating system libraries
#########################
if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    append_to_rc '# recommended by brew doctor'

    # shellcheck disable=SC2016
    append_to_rc 'export PATH="/usr/local/bin:$PATH"' 1

    export PATH="/usr/local/bin:$PATH"
else
  fancy_debug "Homebrew already installed. Skipping ..."
fi
# Homebrew Cask (for binaries)
# brew_tap caskroom/cask
brew_install "caskroom/cask/brew-cask"
# brew_tap 'thoughtbot/formulae'

# Workstation Update      #
# WORKSTATION_UPDATE=true #
# - link bin files        #
# - setup vim             #
# - update homebrew/cask  #
###########################
if [ "$WORKSTATION_UPDATE" = "true" ]
then

  mkdir -p "$HOME/bin"
  cd "$HOME/${DOTFILES_HOME}/.." && \
    #
    # hard link bin files
    git  ls-files bin | \
    ruby -rfileutils -e 'STDIN.readlines.each{|line| \
    FileUtils.ln(File.join(Dir.pwd, line.chomp), File.join(File.expand_path("~"), line.chomp), \
    :verbose => true, :force => true) }'  &&

  fancy_echo "setuping up vim" &&
    sh setup_vim.sh

  fancy_echo "Updating Homebrew formulas ..."
    brew update &&
    brew upgrade brew-cask &&
    brew cleanup &&
    brew cask cleanup
fi

# XCode, installed from app store or
#   \curl http://adcdownload.apple.com/Developer_Tools/xcode_5.0.2/xcode_5.0.2.dmg
# then install command line tools
# sudo xcodebuild -license
###################################
if fn_exists "xcode-select" && ! fn_exists "clang"
then
 `open /Applications/Xcode.app`
  xcode-select --install
fi

# Ruby
# brew_install_or_upgrade 'rbenv'
# brew_install_or_upgrade 'ruby-build'
#
# # shellcheck disable=SC2016
# append_to_rc 'eval "$(rbenv init - $SHELL --no-rehash)"' 1
#
# brew_install_or_upgrade 'openssl'
# brew unlink openssl && brew link openssl --force
# brew_install_or_upgrade 'libyaml'

# Ruby stable for writing general-purpose code
# ruby_version="$(curl -sSL http://ruby.thoughtbot.com/latest)"
#
# eval "$(echo $SHELL | rbenv init -)"

# if ! rbenv versions | grep -Fq "$ruby_version"; then
#   rbenv install -s "$ruby_version"
# fi
#
# rbenv global "$ruby_version"
# rbenv shell "$ruby_version"
#
# gem update --system
#
# Bundler for managing Ruby libraries
# gem_install_or_update 'bundler'

# fancy_echo "Configuring Bundler ..."
#   number_of_cores=$(sysctl -n hw.ncpu)
#   bundle config --global jobs $((number_of_cores - 1))
## RVM
## http://rvm.io/
# # work around missing libgmp bug in binary ruby
# brew rm cloog; brew install cloog
#########################################
install_rvm stable --autolibs=homebrew

# Workstation Update      #
# WORKSTATION_UPDATE=true #
# - update rvm / ruby     #
###########################
if [ "$WORKSTATION_UPDATE" = "true" ]
then
  fancy_echo "updating rvm"
  rvm get stable --auto-dotfiles &> /dev/null || fancy_echo $!
  # Foreman for managing web processes
  install_ruby 2.2 bundler foreman
  rvm use 2.2 --default
fi

## GIT
# brew_install_or_upgrade 'git'
_ensure_github_ssh_configured() {
  # ssh keys to github
  ssh git@github.com 2>&1| grep successfully
  if [ $? -eq 0 ]
  then
    "You are authenticated with github"
  else
    if not_file_exists $HOME/.ssh/id_rsa.pub
    then
      mkdir -p ~/.ssh
      cd ~/.ssh
      ssh-keygen -t rsa -C "${MY_EMAIL}"
      # start ssh agent
      eval "$(ssh-agent -s)"
      ssh-add ~/.ssh/id_rsa
      echo -e "$txtgrn"
      echo "Copy your SSH keys to github if you have not already"
      echo "See http://help.github.com/mac-set-up-git/"
      echo "Or just:"
      echo "cat ~/.ssh/id_rsa.pub | pbcopy"
      echo -e "$txtrst"
    fi
  fi
  ssh -T git@github.com
}
if fn_exists "git"
then
  fancy_debug "we have git"
else
  brew_install "git"
  # The OS X keychain credential helper has been installed to:
  #   /usr/local/bin/git-credential-osxkeychain
  #
  # The 'contrib' directory has been installed to:
  #   /usr/local/share/git-core/contrib
  #
  # Bash completion has been installed to:
  #   /usr/local/etc/bash_completion.d
  #
  # zsh completion has been installed to:
  #   /usr/local/share/zsh/site-functions
  # see https://github.com/thoughtbot/laptop/issues/360
  _ensure_github_ssh_configured
fi

## LIBRARIES INSTALL/UPGRADE


# Heroku Toolbelt for interacting with the Heroku API
# brew_install_or_upgrade 'heroku-toolbelt'


# skip with parity
# RCM for managing company and personal dotfiles
# if ! command -v rcup >/dev/null; then
#   brew_tap 'thoughtbot/formulae'
#   brew_install_or_upgrade 'rcm'
# fi
#
# if [ -f "$HOME/.laptop.local" ]; then
#   . "$HOME/.laptop.local"

# brew_tap 'caskroom/cask'
# brew_install_or_upgrade 'brew-cask'
#
# brew cask install dropbox
# brew cask install google-chrome
# brew cask install rdio
#
# gem_install_or_update 'parity'
#
# brew_install_or_upgrade 'tree'
# brew_install_or_upgrade 'watch'

# Follow shell style guidelines by using ShellCheck and Syntastic.
# http://www.shellcheck.net/about.html
# https://github.com/scrooloose/syntastic
brew_install shellcheck
# fi
# see https://github.com/thoughtbot/laptop/pull/372 re: gnupgp
#  brew_install_or_upgrade 'gpg2'
# see https://github.com/thoughtbot/laptop/pull/391
#  brew_install_or_upgrade 'rbenv-gem-rehash'


# hub for interacting with the GitHub API
# brew_install_or_upgrade 'hub'
brew_install "hub"
if [ $last_command_new_install ]; then
  fancy_echo "See https://github.com/github/hub for what hub adds to git"
fi

# get the nice vim that macvim comes with
# brew_install_or_upgrade 'vim'
brew_install macvim || fancy_echo "Installing macvim may have failed because you haven't installed the full XCode.\n$!"

# Exuberant Ctags for indexing files for vim tab completion
# brew_install_or_upgrade 'ctags'
brew_install ctags
# Tmux for saving project state and switching between projects
# brew_install_or_upgrade 'tmux'
brew_install tmux

brew_install reattach-to-user-namespace --wrap-pbcopy-and-pbpaste --wrap-launchtl
# brew_install_or_upgrade 'reattach-to-user-namespace'
if [ $last_command_new_install ]; then
  fancy_echo "Run tmux kill-server"
fi
brew_install the_platinum_searcher # aka 'pt'

brew_install "tree"
brew_install "trash"

brew_install bash-completion
# cabextract
# cmake

# elasticsearch
# echo -e "$txtgrn"
# echo -e 'elastic search needs java'
# echo -e "$txtrst"
# brew_cask java
# echo -e "$txtred"
# echo -e 'If elasticsearch service fails to start, and you are in tmux/screen, try in a new tab:'
# echo -e 'launchctl load ~/Library/LaunchAgents/homebrew.mxcl.elasticsearch.plist'
# echo -e "$txtrst"
# brew_cask java
# brew_install_service elasticsearch

# erlang
# exercism
# ghi
# graphviz
brew_install grc
# ImageMagick for cropping and resizing images
# brew_install_or_upgrade 'imagemagick'
# imagemagick
# libevent
# libgit2
# maven
# Node.js and NPM, for running apps and installing JavaScript packages
# brew_install_or_upgrade 'node'
# node
# openssl
# ossp-uuid
# pcre
# pkg-config

# Postgresql for storing relational data
# brew_install_or_upgrade 'postgres'
# brew_launchctl_restart 'postgresql'
# which pg_ctl &> /dev/null
# if [ $? -ne 0 ] ; then
#   if brew cask list &> /dev/null ; then
#     if brew cask list postgres &> /dev/null; then
#       echo -e "$txtgrn"
#       echo -e "postgres.app cask installed"
#       echo -e "$txtrst"
#     else
#       echo -e "$txtgrn"
#       echo -e "add postgres.app to your path per http://postgresapp.com/documentation/cli-tools.html"
#       echo -e "$txtrst"
#       export PATH=$PATH:/Applications/Postgres.app/Contents/Versions/9.4/bin
#       brew cask install postgresql --appdir=/Applications
#     fi
#   else
#     brew_install_service postgresql || exit 1
#   fi
#   ARCHFLAGS="-arch x86_64" gem install pg
# fi

# readline

# Redis for storing key-value data
# brew_install_or_upgrade 'redis'
# brew_launchctl_restart 'redis'
# echo "Checking for redis-cli..."
# if which redis-cli &> /dev/null; then
#   if redis-cli ping &> /dev/null; then
#     echo -e "$txtgrn"
#     echo -e "redis is running"
#     echo -e "$txtrst"
#   else
#     echo -e "$txtred"
#     echo -e "Redis was not running."
#     echo -e "You should start it via your daemon system or in another terminal."
#     echo -e "If you're using homebrew, run 'brew uninstall redis; bin/boostrap'"
#     echo -e "I'm going to try to start it for you"
#     echo -e "$txtrst"
#     /usr/local/opt/redis/bin/redis-server /usr/local/etc/redis.conf || exit 1
#   fi
# else
#   echo -e "$txtgrn"
#   echo -e "Installing redis via brew..."
#   echo -e "$txtrst"
#   brew_install_service redis
# fi

# scala
brew_install terminal-notifier
# The Silver Searcher for finding things in files
# brew_install_or_upgrade 'the_silver_searcher'
# the_silver_searcher
# wget
# wine
# winetricks
# youtube-dl

# ack
# apple-gcc42
# bazaar
# beanstalk
# brew-cask
# cabal-install
# chruby
# cscope
# curl
# curl-ca-bundle
# cvs
# d-bus
# doxygen
# dvdbackup
# elinks
# emacs
# faac
# ffmpeg
# flasm
# flex
# fortune
# freetype
# fswatch
# gcc
# gdbm
# gdk-pixbuf
# geoip
# gettext
# ghc
# git
# glew
# glib
# gnupg
# gnutls
# go
# gobject-introspection
# gource
# gtk+
# harfbuzz
# htmldoc
# htop-osx
# icu4c
# intltool
# irssi
# jp2a
# jpeg
# lame
# leiningen
# libevent
# libffi
# lynx
# nettle
# nginx
# nvm
# openjpeg
# phantomjs
# poppler
# ppl011
# pv
# python
# python3
brew_install pyenv # PythonBrew replacement
# Qt for headless JavaScript testing via Capybara Webkit
# brew_install_or_upgrade 'qt'
# qt
# Rbenv for managing versions of Ruby
# rbenv
# rtmpdump
# Ruby Build for installing Rubies
# ruby-build
# source-highlight
# sqlite
# texi2html
# the_platinum_searcher
# tmate
# tor
# unixodbc
# wemux
# wxmac
# x264
# xvid
# xz
# yasm

## Homebrew Cask (for binaries)

brew_cask "alfred" --appdir="/Applications"
if [ $last_command_new_install ]; then
  fancy_echo "open alfred from '/opt/hombrew-cask/Caskroom'"
  # ==> Symlinking App 'Alfred 2.app' to '$HOME/Applications/Alfred
  # 2.app'
  # ==> Symlinking App 'Alfred Preferences.app' to
  # '$HOME/Applications/Alfred Preferences.app'
  # tell alfred find homebrew_casked items
  brew_cask "alfred link"
fi

brew_cask "caffeine" --appdir="/Applications" # TODO: add to login items
brew_cask "cd-to" --appdir="/Applications"
# TODO: add instructions for dragging link to finder
brew_cask "nvalt" --appdir="/Applications"
# brew_cask "adium"" --appdir="/Applications"
# brew_cask "atom" --appdir="/Applications"
# brew_cask "audacity" --appdir="/Applications"
# brew_cask "boot2docker" --appdir="/Applications"
# brew_cask "calibre" --appdir="/Applications"
# brew_cask "cyberduck" --appdir="/Applications"
# brew_cask "fluid" --appdir="/Applications"
brew_cask "firefox" --appdir="/Applications"
brew_cask "github" --appdir="/Applications"
brew_cask "google-chrome" --appdir="/Applications"
# brew_cask "google-drive" --appdir="/Applications"
# brew_cask "hipchat" --appdir="/Applications"
brew_cask "istat-menus" --appdir="/Applications"
brew_cask "iterm2" --appdir="/Applications"
# brew_cask "java" --appdir="/Applications"
brew_cask "keka" --appdir="/Applications"
# brew_cask "launchrocket" --appdir="/Applications"
brew_cask lunchy # lunchy-go
# brew_cask "libreoffice" --appdir="/Applications"
# brew_cask "minecraft" --appdir="/Applications"
brew_cask "netnewswire" --appdir="/Applications"
# brew_cask "onyx" --appdir="/Applications"
# brew_cask "osxfuse" --appdir="/Applications"
brew_cask "pgadmin3" --appdir="/Applications"
# brew_cask "picasa" --appdir="/Applications"
# brew_cask "postgres" --appdir="/Applications"
# brew_cask "quiterss" --appdir="/Applications"
brew_cask "racket" --appdir="/Applications"
brew_cask "slack" --appdir="/Applications"
# brew_cask sequel-pro --appdir="/Applications"
brew_cask "sqlitebrowser" --appdir="/Applications"
# brew_cask "sublime-text" --appdir="/Applications"
# brew_cask "tcpblock" --appdir="/Applications"
# brew_cask "tunnelblick" --appdir="/Applications"
brew_cask "vagrant" --appdir="/Applications"
# brew_cask "virtualbox" --appdir="/Applications" # doesn't install through script
# brew_cask "vmware-fusion" --appdir="/Applications"
# brew_cask "wireshark" --appdir="/Applications"
# brew_cask "xquartz" --appdir="/Applications" # doesn't install through script

## Repos Directory
if file_exists $HOME/projects
then
  fancy_echo "$HOME/projects exists"
else
  fancy_echo "Creating $HOME/projects"
  mkdir -p $HOME/projects
fi
fancy_echo "all done setting up workstation!"
