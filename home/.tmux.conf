##### COMMAND REFERENCES ###
# http://www.mechanicalkeys.com/files/os/notes/tm.html
# http://home.roadrunner.com/~computertaijutsu/screentmux.html
# http://blog.hawkhost.com/2010/06/28/tmux-the-terminal-multiplexer/
# https://github.com/livingsocial/ls-pair/blob/master/cheat_sheets/tmux%20cheat%20sheet.md
###### VIDEOS
# http://confreaks.com/videos/2364-mwrc2013-tdding-tmux
# http://confreaks.com/videos/2291-larubyconf2013-impressive-ruby-productivity-with-vim-and-tmux
###### RECIPES
# tmux-session save https://github.com/mislav/dotfiles/blob/master/bin/tmux-session
# http://antityping.com/2013/05/05/tmux-vim-slime-ruby-repl/
# http://blog.quarternotecoda.com/blog/2013/06/06/quick-script-for-tmux-pair-sessions/
# # https://gist.github.com/marksim/5785406
# http://pivotallabs.com/how-we-use-tmux-for-remote-pair-programming-/
# http://joshuadavey.com/2012/01/10/faster-tdd-feedback-with-tmux-tslime-vim-and-turbux/
# http://robots.thoughtbot.com/post/55273519322/running-specs-from-vim-sent-to-tmux-via-tslime
# http://robots.thoughtbot.com/post/53022241323/seamlessly-navigate-vim-and-tmux-splits
# enable pbcopy and pbpaste
# https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard/blob/master/README.md
###### CONFIG REFERENCES
# http://robots.thoughtbot.com/post/2641409235/a-tmux-crash-course
# https://raw.github.com/chrishunt/dot-files/master/.tmux.conf
# http://velvetpulse.com/2012/11/19/improve-your-ruby-workflow-by-integrating-vim-tmux-pry/
# http://rhnh.net/2011/08/20/vim-and-tmux-on-osx
# http://pragprog.com/book/bhtmux/tmux


###########################
#  Configuration
###########################

# EXPERIMENTS START
# Sane scrolling
# set -g terminal-overrides 'xterm*:smcup@:rmcup@'
# # http://superuser.com/questions/310251/use-terminal-scrollbar-with-tmux?lq=1
# This is possible in both GNU screen and in tmux and the workaround is similar: to fool the multiplexers into thinking that the terminal has no "alternate screen" mode (such as that used by pico, mutt, etc). This is accomplished by setting termcap commands for the session.
#
# For GNU screen, put this in your .screenrc:
#
# termcapinfo xterm*|xs|rxvt|terminal ti@:te@
# and for tmux, add this to your .tmux.conf:
#
# set -ga terminal-overrides ',xterm-256color:smcup@:rmcup@'
# The 'xterm*' part of the command should be set to whatever your terminal-emulator is declared as. Some form of xterm is a good guess, but you can check yours on most sane *nix systems with:
#
# echo $TERM
# and this can usually be set in the preferences of your terminal program (ie: For Apple's Terminal.app, it's in Settings->Profile->Advanced (or Settings->Advanced->Emulation pre-yosemite) "Declare terminal as".
#
# The end result is that the overflow ends up in the terminal's scrollback buffer instead of disappearing. Of course, since this is one static buffer, things will get messy as you switch between screen or tmux windows, but this is handy for quickly flicking up to see the output of an ls command or the such.
# EXPERIMIENTS END
# use 256 term for pretty colors
set -g default-terminal "screen-256color"

# increase scroll-back history
# increase scrollback lines
set -g history-limit 10000
# set -g history-limit 5000

# act like vim
setw -g mode-keys vi
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
bind-key -r C-h select-window -t :-
bind-key -r C-l select-window -t :+

# act like GNU screen
unbind C-b
set -g prefix C-a

# disable mouse
# setw -g mode-mouse off
# http://superuser.com/questions/209437/how-do-i-scroll-in-tmux
# # For mouse support (for switching panes and windows)
# # Only needed if you are using Terminal.app (iTerm has mouse support)
# Install http://www.culater.net/software/SIMBL/SIMBL.php
# Then install https://bitheap.org/mouseterm/
# set -g mode-mouse on
#  More on mouse support http://floriancrouzat.net/2010/07/run-tmux-with-mouse-support-in-mac-os-x-terminal-app/
#
#   # Enable mouse support in ~/.tmux.conf
#   set-option -g mouse-select-pane on
#   set-option -g mouse-select-window on
#   set-window-option -g mode-mouse on
#
#    # Install Teamocil to pre define workspaces
#    https://github.com/remiprev/teamocil
#
#     # See http://files.floriancrouzat.net/dotfiles/.tmux.conf for configuration examples
#     https://github.com/norio-nomura/EasySIMBL/
#
#     http://superuser.com/questions/310251/use-terminal-scrollbar-with-tmux?lq=1
#
# Enable mouse support
set -g mode-mouse on
#  More on mouse support http://floriancrouzat.net/2010/07/run-tmux-with-mouse-support-in-mac-os-x-terminal-app/
set-option -g mouse-select-pane on
set-option -g mouse-select-window on
set-window-option -g mode-mouse on

# start window numbers at 1 to match keyboard order with tmux window order
set -g base-index 1
set-window-option -g pane-base-index 1

# renumber windows sequentially after closing any of them
set -g renumber-windows on

# decrease command delay (increases vim responsiveness)
set -sg escape-time 1

# increase repeat time for repeatable commands
set -g repeat-time 1000

# start window index at 1
# set -g base-index 1

# start pane index at 1
# setw -g pane-base-index 1

# highlight window when it has new activity
setw -g monitor-activity on
set -g visual-activity on

# re-number windows when one is closed
# set -g renumber-windows on

###########################
#  Key Bindings
###########################

# tmux prefix
unbind C-b
set -g prefix C-j

# OSX fix for pbcopy/pbpaste
# https://github.com/Homebrew/homebrew/blob/master/Library/Formula/reattach-to-user-namespace.rb#L10-L11
# brew install reattach-to-user-namespace --wrap-pbcopy-and-pbpaste --wrap-launchtl
# set-option -g default-command "reattach-to-user-namespace -l \"$SHELL\""
# bind-key 'P' run-shell "tmux set-buffer \"$(pbpaste)\"; tmux paste-buffer"
# bind-key 'Y' run-shell "tmux show-buffer | pbcopy"
#
# vim copy and paste
# copy with 'enter' or 'y' and send to mac os clipboard: http://goo.gl/2Bfn8
# depends on setw -g mode-keys vi (above)
# 1. start copy mode w/ prefix-[
# 2. start selection w/ v
# 3. copy selection  w/ y or Enter
# Setup 'v' to begin selection as in Vim
# bind-key -t vi-copy v begin-selection
# bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"
# # Update default binding of `Enter` to also use copy-pipe
# unbind -t vi-copy Enter
# bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"
#
# this doesn't work :(
# http://joncairns.com/2013/06/copying-between-tmux-buffers-and-the-system-clipboard/
# bind y run-shell "tmux show-buffer | pbcopy" \; display-message "Copied tmux buffer to system clipboard"
# # paste
# unbind C-p
# bind C-p paste-buffer
# bind-key -t vi-copy v begin-selection
#
# paste
# unbind C-p
# bind C-p paste-buffer

# window splitting
unbind %
bind | split-window -h
unbind '"'
bind - split-window -v

# resize panes
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# create 25% lower split
unbind t
bind t split-window -p 25

# quickly switch / cycle panes
unbind ^J
bind ^J select-pane -t :.+
# switch to last pane
# bind-key C-a last-pane

# force a reload of the config file
unbind r
bind r source-file ~/.tmux.conf \; display "Reloaded!"

###########################
# Status Bar
###########################

# enable UTF-8 support in status bar
set -g status-utf8 on

# set refresh interval for status bar
set -g status-interval 30

# center the status bar
set -g status-justify left

# show session, window, pane in left status bar
set -g status-left-length 40
set -g status-left '#[fg=green]#S#[fg=blue] #I:#P#[default]'

# show hostname, date, time, and battery in right status bar
set-option -g status-right '#[fg=green]#H#[default] %m/%d/%y %I:%M\
 #[fg=red]#(battery discharging)#[default]#(battery charging)'

# remove administrative debris (session name, hostname, time) in status bar
# set -g status-left ''
# set -g status-right ''

###########################
# Colors
###########################

# soften status bar color from harsh green to light gray
set -g status-bg '#666666'
set -g status-fg '#aaaaaa'
# set -g status-bg colour235
# set -g status-fg white

# highlight current window
set-window-option -g window-status-current-fg black
set-window-option -g window-status-current-bg green

# set color of active pane
set -g pane-border-fg colour235
set -g pane-border-bg black
set -g pane-active-border-fg green
set -g pane-active-border-bg black

# Local config
if-shell "[ -f ~/.tmux.conf.local ]" "source ~/.tmux.conf.local"
